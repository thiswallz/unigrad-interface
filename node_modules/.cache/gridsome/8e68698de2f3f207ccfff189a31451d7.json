{"remainingRequest":"/Users/mbj/projects/unigrade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mbj/projects/unigrade/src/components/organisms/home/they-talked.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/mbj/projects/unigrade/src/components/organisms/home/they-talked.vue","mtime":1647429123874},{"path":"/Users/mbj/projects/unigrade/node_modules/ts-loader/index.js","mtime":1641892500322},{"path":"/Users/mbj/projects/unigrade/node_modules/cache-loader/dist/cjs.js","mtime":1641848850514},{"path":"/Users/mbj/projects/unigrade/node_modules/vue-loader/lib/index.js","mtime":1641067260321}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Vue, Component, Watch } from 'vue-property-decorator'\nimport SimpleButton from '~/components/atoms/simple-button.vue'\nimport SimpleBox from '~/components/atoms/simple-box.vue'\nimport { BreakPoint } from '~/model/break-points'\nimport list from '~/data/theytalked.json'\n\n@Component({\n  components: { SimpleButton, SimpleBox },\n})\nexport default class TheyTalked extends Vue {\n  screenBreakPoint: string = ''\n  selected: number = 0\n  lineActive: number = 0\n  list: any[] = list\n\n  private interval: ReturnType<typeof setInterval> | null = null\n  private intervalMove: ReturnType<typeof setInterval> | null = null\n\n  get isDark() {\n    return this.$store.state.theme.color === 'dark'\n  }\n\n  get lines() {\n    const count = Math.ceil(this.list.length / this.itemsToShow)\n    return Array.from(Array(count).keys())\n  }\n\n  get enrichedList() {\n    if (this.screenBreakPoint === '') {\n      return list\n    }\n    if (this.screenBreakPoint === 'md' || this.screenBreakPoint === 'sm') {\n      return [...list, {}, {}]\n    } else {\n      return [...list, {}, {}, {}, {}]\n    }\n  }\n\n  get selectedIndexValue() {\n    if (!this.selected) {\n      if (this.screenBreakPoint === '' || this.screenBreakPoint === 'sm') {\n        return 0\n      }\n      if (this.screenBreakPoint === 'md') {\n        return 1\n      }\n      return 2\n    }\n    if (this.screenBreakPoint === '' || this.screenBreakPoint === 'sm') {\n      return this.selected\n    }\n    if (this.screenBreakPoint === 'md') {\n      return this.selected + 1\n    }\n    return this.selected + 2\n  }\n\n  get itemsToShow(): number {\n    if (this.screenBreakPoint === '' || this.screenBreakPoint === 'sm') {\n      return 1\n    }\n    if (this.screenBreakPoint === 'md') {\n      return 3\n    }\n    return 3\n  }\n\n  selectLine(index: number) {\n    this.lineActive = index\n    if (index === 0) {\n      this.selected = 0\n    }\n    if (index) {\n      const next = this.itemsToShow * index\n      if (next >= list.length) {\n        this.selected = list.length\n      } else {\n        this.selected = next\n      }\n    }\n  }\n\n  mounted() {\n    const isBrowser = typeof window !== 'undefined'\n    if (isBrowser) {\n      this.winWidth()\n      this.intervalMove = setInterval(() => {\n        if (this.lines.length <= 1 + this.lineActive) {\n          this.selectLine(0)\n        } else {\n          if (this.lines.length === this.lineActive + 1) {\n            this.selectLine(this.lineActive)\n          } else {\n            this.selectLine(this.lineActive + 1)\n          }\n        }\n      }, 5000)\n    }\n  }\n\n  unmounted() {\n    if (this.interval) {\n      clearInterval(this.interval)\n      clearInterval(this.intervalMove)\n    }\n  }\n\n  private winWidth() {\n    this.interval = setInterval(() => {\n      var w = window.innerWidth\n      if (w <= BreakPoint.ss) {\n        this.screenBreakPoint = ''\n      } else if (w >= BreakPoint.ss && w <= BreakPoint.sm) {\n        this.screenBreakPoint = 'sm'\n      } else if (w >= BreakPoint.sm && w <= BreakPoint.lg) {\n        this.screenBreakPoint = 'md'\n      } else {\n        this.screenBreakPoint = 'lg'\n      }\n    }, 100)\n  }\n\n  @Watch('selected')\n  onSelectChanged(value: number) {\n    if(this.itemsToShow>1){\n      const r = Math.ceil(this.list.length / this.itemsToShow)\n      const page = Math.floor((r + value) / this.itemsToShow)\n      this.lineActive = page - 1\n    }else{\n      this.lineActive =  value\n    }\n }\n}\n",null]}