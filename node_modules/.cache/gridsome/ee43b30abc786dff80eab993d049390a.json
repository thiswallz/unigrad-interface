{"remainingRequest":"/Users/mbj/projects/unigrade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mbj/projects/unigrade/src/components/molecules/animation.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/mbj/projects/unigrade/src/components/molecules/animation.vue","mtime":1647797007999},{"path":"/Users/mbj/projects/unigrade/node_modules/ts-loader/index.js","mtime":1641892500322},{"path":"/Users/mbj/projects/unigrade/node_modules/cache-loader/dist/cjs.js","mtime":1641848850514},{"path":"/Users/mbj/projects/unigrade/node_modules/vue-loader/lib/index.js","mtime":1641067260321}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\nimport { Vue, Component, Prop } from 'vue-property-decorator'\nimport axios from 'axios'\nimport lottie, { AnimationItem } from 'lottie-web'\n\n@Component({\n  components: {},\n})\nexport default class Animation extends Vue {\n  @Prop() source!: string\n  @Prop({ default: false }) rePlay?: boolean\n  @Prop({ default: false }) autoload?: boolean\n  @Prop({ default: false }) infinite?: boolean\n  @Prop({ default: false }) unobserve?: boolean\n  @Prop() delay?: number\n  @Prop() alive?: number\n\n  hide: boolean = false\n  private animation: AnimationItem | null = null\n  private sources: Record<string, string> = {}\n\n  get isDark() {\n    return this.$store.state.theme.color === 'dark'\n  }\n\n  async mounted() {\n    const { data } = await axios(this.source)\n    this.sources[this.source] = data\n    if (!this.rePlay) {\n      await this.load()\n    } else {\n      this.observe()\n    }\n  }\n\n  private observe() {\n    this.loadAnimation(true)\n    const wrapper = this.$refs.animation as Element\n\n    if (wrapper) {\n      const observer = new IntersectionObserver(\n        (entries) => {\n          entries.forEach(async (entry) => {\n            if (entry.intersectionRatio > 0) {\n              if (\n                entry.isIntersecting &&\n                Math.floor(entry.intersectionRatio) === 1\n              ) {\n                await this.load(true)\n                if (this.unobserve) {\n                  observer.unobserve(wrapper)\n                }\n              }\n              return\n            }\n          })\n        },\n        {\n          threshold: [0, 0.25, 0.5, 0.75, 1],\n        }\n      )\n      observer.observe(wrapper)\n    }\n  }\n\n  private loadAnimation(lazy: boolean = false) {\n    if (lazy) {\n      this.hide = true\n    }\n    const data = this.sources[this.source]\n    if (this.animation) {\n      this.animation.destroy()\n    }\n    this.animation = lottie.loadAnimation({\n      container: this.$refs.animation as Element,\n      renderer: 'svg',\n      loop: this.infinite,\n      autoplay: lazy ? false : this.autoload,\n      animationData: data,\n    })\n  }\n\n  private async load(forcePlay: boolean = false) {\n    if (this.animation) {\n      //this.animation.destroy()\n    }\n    const data = this.sources[this.source]\n    if (this.delay) {\n      this.hide = true\n      setTimeout(() => {\n        if (this.autoload === true) {\n          if (forcePlay) {\n            this.animation.stop()\n            this.animation.play()\n          } else {\n            this.loadAnimation()\n          }\n          this.hide = false\n        }\n      }, this.delay * 1000)\n    } else {\n      if (forcePlay) {\n        this.animation.stop()\n        this.animation.play()\n      } else {\n        this.loadAnimation()\n      }\n      this.hide = false\n      if (this.alive) {\n        setTimeout(() => {\n          if (this.$refs.animation) {\n            this.hide = true\n          }\n        }, this.alive * 1000)\n      }\n    }\n  }\n}\n",{"version":3,"sources":["animation.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"animation.vue","sourceRoot":"src/components/molecules","sourcesContent":["<template>\n  <div>\n    <div\n      class=\"\"\n      :class=\"[hide ? 'hidden-lottie' : 'animation-lottie']\"\n      ref=\"animation\"\n    ></div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from 'vue-property-decorator'\nimport axios from 'axios'\nimport lottie, { AnimationItem } from 'lottie-web'\n\n@Component({\n  components: {},\n})\nexport default class Animation extends Vue {\n  @Prop() source!: string\n  @Prop({ default: false }) rePlay?: boolean\n  @Prop({ default: false }) autoload?: boolean\n  @Prop({ default: false }) infinite?: boolean\n  @Prop({ default: false }) unobserve?: boolean\n  @Prop() delay?: number\n  @Prop() alive?: number\n\n  hide: boolean = false\n  private animation: AnimationItem | null = null\n  private sources: Record<string, string> = {}\n\n  get isDark() {\n    return this.$store.state.theme.color === 'dark'\n  }\n\n  async mounted() {\n    const { data } = await axios(this.source)\n    this.sources[this.source] = data\n    if (!this.rePlay) {\n      await this.load()\n    } else {\n      this.observe()\n    }\n  }\n\n  private observe() {\n    this.loadAnimation(true)\n    const wrapper = this.$refs.animation as Element\n\n    if (wrapper) {\n      const observer = new IntersectionObserver(\n        (entries) => {\n          entries.forEach(async (entry) => {\n            if (entry.intersectionRatio > 0) {\n              if (\n                entry.isIntersecting &&\n                Math.floor(entry.intersectionRatio) === 1\n              ) {\n                await this.load(true)\n                if (this.unobserve) {\n                  observer.unobserve(wrapper)\n                }\n              }\n              return\n            }\n          })\n        },\n        {\n          threshold: [0, 0.25, 0.5, 0.75, 1],\n        }\n      )\n      observer.observe(wrapper)\n    }\n  }\n\n  private loadAnimation(lazy: boolean = false) {\n    if (lazy) {\n      this.hide = true\n    }\n    const data = this.sources[this.source]\n    if (this.animation) {\n      this.animation.destroy()\n    }\n    this.animation = lottie.loadAnimation({\n      container: this.$refs.animation as Element,\n      renderer: 'svg',\n      loop: this.infinite,\n      autoplay: lazy ? false : this.autoload,\n      animationData: data,\n    })\n  }\n\n  private async load(forcePlay: boolean = false) {\n    if (this.animation) {\n      //this.animation.destroy()\n    }\n    const data = this.sources[this.source]\n    if (this.delay) {\n      this.hide = true\n      setTimeout(() => {\n        if (this.autoload === true) {\n          if (forcePlay) {\n            this.animation.stop()\n            this.animation.play()\n          } else {\n            this.loadAnimation()\n          }\n          this.hide = false\n        }\n      }, this.delay * 1000)\n    } else {\n      if (forcePlay) {\n        this.animation.stop()\n        this.animation.play()\n      } else {\n        this.loadAnimation()\n      }\n      this.hide = false\n      if (this.alive) {\n        setTimeout(() => {\n          if (this.$refs.animation) {\n            this.hide = true\n          }\n        }, this.alive * 1000)\n      }\n    }\n  }\n}\n</script>\n"]}]}